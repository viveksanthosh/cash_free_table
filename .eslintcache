[{"/Users/vivek/Documents/cashfree-assignment/3.table-display/src/App.js":"1","/Users/vivek/Documents/cashfree-assignment/3.table-display/src/TableView.js":"2"},{"size":1661,"mtime":1607832562524,"results":"3","hashOfConfig":"4"},{"size":1537,"mtime":1607832388930,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vqcn4q",{"filePath":"8","messages":"9","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"/Users/vivek/Documents/cashfree-assignment/3.table-display/src/App.js",[],"/Users/vivek/Documents/cashfree-assignment/3.table-display/src/TableView.js",["11","12"],"import './TableView.css'\n\nconst TableView = ({ data, onDeleteClick,\n    sortableHeaders, onSortClick }) => {\n    if (!data || data.length === 0)\n        return null\n    const headers = Object.keys(data[0])\n    return <table className='table'>\n        <thead>\n            <Header onSortClick={onSortClick} sortableHeaders={sortableHeaders} headers={headers} />\n        </thead>\n        <tbody>\n            {data.map(d => <Body onDeleteClick={onDeleteClick} key={d.id} headers={headers} values={d} />)}\n        </tbody>\n\n    </table>\n}\n\nconst Header = ({ headers, sortableHeaders, onSortClick }) => {\n\n    function showArrow(type, sortableHeader) {\n        if (!sortableHeader)\n            return false\n        if (!sortableHeader.sortOrder)\n            return true\n        return sortableHeader.sortOrder === type\n    }\n\n    return <tr>\n        {headers.map(h => <th onClick={() => { onSortClick(h, sortableHeaders[h].type, sortableHeaders[h].sortOrder) }}\n            key={h}\n        >{h}\n            <span className='arrowBox'>\n                {showArrow('down', sortableHeaders[h]) && <i class=\"arrow down\"></i>}\n                {showArrow('up', sortableHeaders[h]) && <i class=\"arrow up\"></i>}\n            </span></th>)}\n        <th>Actions</th>\n    </tr>\n}\n\nconst Body = ({ headers, values, onDeleteClick }) => (<tr className='table-body'>\n    {headers.map(h => <td key={h}>{values[h]}</td>)}\n    <td><a>Open</a>\n        <a onClick={() => {\n            onDeleteClick(values.id)\n        }}>Delete</a></td>\n</tr>)\n\nexport { TableView }",{"ruleId":"13","severity":1,"message":"14","line":43,"column":9,"nodeType":"15","endLine":43,"endColumn":12},{"ruleId":"13","severity":1,"message":"14","line":44,"column":9,"nodeType":"15","endLine":46,"endColumn":12},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement"]